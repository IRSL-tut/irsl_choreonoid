## TODO (2022.8.7)

 - attach history

 - 表示の選択 (connecting, actuator active/in-active nothing)
   bodyのメニュー
   connectingのメニュー
   
 - unalign

 - undo

 - save history
 - load history

 - バーのアイコン作る
 
 - next alignをもっと簡単に？ -> key??
 
 - TreeWidget
   - 表示
   - 選択
      -> sceneに表示
      -> パラメータ設定 / rename

 - connect_shapeへのscale導入

-> そもそものディレクトリ構成をどうするか
  独立した単体のプラグインとする -> choreonoid/ext に置ける
  (rosパッケージとして使える？)

scene-body(sig)
view_tab(sig)
view_tree(sig)

assemble-manager(sig, proc)

A:signal発生元が操作対象のポインターを持つ -> signal要らない -> 独自signalは必要ない
B:操作対象のインスタンスがsignal発生元のシグナルを登録

signal発生元: SignalProxyを持つ
操作対象:connectしている

## TODO
 DONE - attach できるか

 DONE - eusと同じ位置にあるか
 
 - roboasm.l を書き出せるか？ -> eusで読めるか
 // roboasm (yaml形式/)
   DONE? -> .roboasm (c++) <<< 書き出し
   DONE <- .roboasm (c++)
   DONE .roboasm.old.l -> .roboasm (eus) only test
  --->  ここまでできたらいい
   .roboasm -> .roboasm.new.l (eus) 
   <- .roboasm.new.l (eus)
   -> .roboasm.new.l (eus)
   .roboasm.new.l -> .roboasm (eus)

   not required / .roboasm -> .roboasm.old.l (eus)

 DONE - Body loaderを使わずにbodyを作る(shape?)

 DONE - Body fixed-joint込みで全体を作る
 
 DONE - merge links connected with fixed-joint

===> CUIバージョン完成

 DONE - partsの表示 

 DONE - connecting-pointの表示

 DONE - robotの表示

 DONE - clickして結合

 - attach history
 
 - align -> attach

 - un align

VISUALのコピー?
copyChildrenTo() // SceneGraph.h

dump coords(c++, eus) { translation: [0,0,0], rotation: [0,0,0,0] }
read coords(c++, eus)

## test code

coordinates // transform

RoboasmSettings -> parse settings.yaml

RoboasmCoords // worldcoords etc

RoboasmRobot // validity <- read .roboasm / create by hand
                dump .roboasm

--- bar ボタン配置

[todo]
 - アイテムビューの変更禁止 ->
 - ツリーの表示 ( TreeWidget )
 
 --- options

viewAll
SceneWidget.cpp
---
    if(!hasActiveInteractiveCamera()){
        return;
    }
    const BoundingBox& bbox = renderer->scene()->boundingBox();
    if(bbox.empty()){
        return;
    }
---

p <= (make-parts-from-key p-type p-name) create configuretion -> roboasm-parts

arobot <= (make-robot-assembler-robot p :name "")

loop
   p-type  <= (cadr (assoc :parts-type plist)))
   p-name  <= (cadr (assoc :parts-name plist)))
   p-point <= (cadr (assoc :parts-point plist)))
   attach-point <= (cadr (assoc :robot-parts-point plist)))
   config  <= (cadr (assoc :configuration plist)))
   p <= (make-parts-from-key p-type p-name) // create configuretion -> roboasm-parts

   p-p <= (send p :find p-point :active-fixed-points))
   r-p <= (send arobot :find attach-point :active-fixed-points)

   (if (not p) ==> error
   (if (not (and r-p p-p)) ==> error

   ret => (send arobot :attach p
                :parts-point p-p :robot-point r-p
                :attach-configuration (if (eq config :default) nil config))
